package maath

object ThirdTask {

  /**
   * Вычисляет двойную сумму по формуле:
   * Σ(k=1..10) [k³ * Σ(l=1..15) (k - l)²]
   * 
   * @return BigInt - результат вычисления двойной суммы
   * 
   * @note Алгоритм работает следующим образом:
   * 1. Для каждого k от 1 до 10:
   *    - Вычисляется k в кубе (k³)
   *    - Для каждого l от 1 до 15 вычисляется квадрат разности (k - l)²
   *    - Суммируются все квадраты разностей для данного k
   *    - Умножается куб k на сумму квадратов
   * 2. Суммируются результаты для всех k
   */

  
  def calculateDoubleSum(kMax: Int, lMax: Int): BigInt = {

    require(kMax > 0 && lMax > 0, "Параметры kMax и lMax должны быть положительными")
    // Внешняя сумма: перебираем k от 1 до kMax
    (1 to kMax).map { k =>
      // Вычисляем k в кубе 
      val cube = BigInt(k).pow(3)
      
      // Внутренняя сумма: перебираем l от 1 до lMax
      val innerSum = (1 to lMax).map(l => 
        // Вычисляем квадрат разности (k - l)²
        (k - l) * (k - l)
      ).sum  // Суммируем все квадраты разностей для данного k
      
      // Умножаем куб k на сумму квадратов разностей
      cube * innerSum
    }.sum  // Суммируем результаты для всех k
  }
}
